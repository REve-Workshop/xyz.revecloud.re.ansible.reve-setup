- name: Include common variables
  include_vars:
    file: ../../common/vars/main.yml
- name: "Update non XDG compliant configuration"
  block:
    ### ----------------------------------------
    # .zshrc must remain in the $HOME directory of the user.  The rest of
    # the zsh configuration is stored in the $XDG_CONFIG_HOME directory.
    - name: Deploy .zshrc
      copy:
        src: "{{ root_config_repo }}/{{ applications.zsh.dir }}/zshrc"
        dest: "{{ user_home }}/.zshrc"
      when: (actions['config'] == True and user_data['configurations']['zsh']['config'] is undefined) or
            (user_data['configurations']['zsh']['config'] is defined and user_data['configurations']['zsh']['config'] == True)
    # ------------------------------------------
    - name: QuickLisp setup
      block:
        - name: Install quicklisp
          command: "sbcl --disable-debugger --load {{ git_3rdparty }}/{{ applications.common_lisp.ql_repo_dir }}/quicklisp.lisp --eval \"(progn (quicklisp-quickstart:install) (exit))\""
        # It is necessary to patch this file, else, the command in the
        # next task will ask for pressing enter (Ansible doesn't
        # manage interactive applications, AFAIK).
        - name: Patch quicklisp/quicklisp/impl-util.lisp
          lineinfile:
            line: "(when (eq 1 1)"
            regexp: "\\(ql-util:press-enter-to-continue\\)"
            path: "{{ user_home }}/quicklisp/quicklisp/impl-util.lisp"
            state: present
        - name: Ensure quicklisp is automatically loaded
          command: "sbcl --disable-debugger --load {{ user_home }}/quicklisp/setup.lisp --eval \"(progn (ql:add-to-init-file) (exit))\""
      when:
        - (actions['config'] == True and user_data['configurations']['common_lisp']['config'] is undefined) or
          (user_data['configurations']['common_lisp']['config'] is defined and user_data['configurations']['common_lisp']['config'] == True)
    - name: Deploy TMux configuration
      include_role:
        name: tmux
      when:
        - (actions['config'] == True and user_data['configurations']['tmux']['config'] is undefined) or
          (user_data['configurations']['tmux']['config'] is defined and user_data['configurations']['tmux']['config'] == True)
    - name: Deploy Emacs configuration
      include_role:
        name: emacs
      when:
        - (actions['config'] == True and user_data['configurations']['emacs']['config'] is undefined) or
          (user_data['configurations']['emacs']['config'] is defined and user_data['configurations']['emacs']['config'] == True)
  become: True
  become_user: "{{ user_data.name }}"
